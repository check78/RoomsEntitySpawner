-- Services
local Players = game:GetService("Players")
local ReSt = game:GetService("ReplicatedStorage")
local RS = game:GetService("RunService")
local TS = game:GetService("TweenService")
local CG = game:GetService("CoreGui")

-- Variables
local Plr = Players.LocalPlayer
local Char = Plr.Character or Plr.CharacterAdded:Wait()
local Hum = Char:WaitForChild("Humanoid")
local Camera = workspace.CurrentCamera

local SelfModules = {
    DefaultConfig = loadstring(game:HttpGet("https://raw.githubusercontent.com/check78/RoomsEntitySpawner/main/RoomsConfig.txt"))(),
    Functions = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Functions.lua"))(),
}

local FindPartOnRayWithIgnoreList = workspace.FindPartOnRayWithIgnoreList
local WorldToViewportPoint = Camera.WorldToViewportPoint

local Spawner = {}

-- Misc Functions

function onCharacterAdded(char)
    Char, Hum = char, char:WaitForChild("Humanoid")
end

function getPlayerRoot()
    return Char:FindFirstChild("HumanoidRootPart") or Char:FindFirstChild("Head")
end

-- Functions

Spawner.createEntity = function(config)
    for i, v in next, SelfModules.DefaultConfig do
        if config[i] == nil then
            config[i] = v
        end
    end

    -- Model

    local entityModel = LoadCustomInstance(config.Model)

config.Speed = tonumber(config.Speed)
local sped = config.Speed
            
            if config.CustomName then
                entityModel.Name = config.CustomName
            end

            entityModel:SetAttribute("IsCustomEntity", true)

            -- EntityTable

            local entityTable = {
                Model = entityModel,
                Config = config,
                Debug = {
                    OnEntitySpawned = function() end,
                    OnEntityDespawned = function() end,
                    OnEntityStartMoving = function() end,
                    OnEntityEnteredRoom = function() end,
                    OnLookAtEntity = function() end,
                    OnDeath = function() end
                }
            }

            return entityTable
end

Spawner.runEntity = function(entityTable)

local entityModel = entityTable.Model:Clone()
local entity = entityModel:FindFirstChildWhichIsA("BasePart")
entity.CFrame = workspace.SpawnLocation.CFrame + Vector3.new(0, entityTable.Config.HeightOffset, 0)
entityModel.Parent = workspace
local exist = true

task.spawn(entityTable.Debug.OnEntitySpawned)

task.wait(entityTable.Config.DelayTime)

coroutine.wrap(function()
while exist == true do
            local entityPos = entity.Position
            local rootPos = getPlayerRoot().Position
            local playerInSight = FindPartOnRayWithIgnoreList(workspace, Ray.new(entityPos, rootPos - entityPos), {entity, Char}) == nil
 local Killrange = (rootPos - entityPos).Magnitude
    if playerInSight then
                -- Look at entity

                local _, onScreen = WorldToViewportPoint(Camera, entity.Position)

                if onScreen then
                    task.spawn(entityTable.Debug.OnLookAtEntity)
                end
if not Char:GetAttribute("IsDead") then
        if Killrange < entityTable.Config.KillRange and entityTable.Config.CanKill == true then
              Hum:TakeDamage(entityTable.Config.Damage)
              if Hum.Health <= 0 then
              task.spawn(entityTable.Debug.OnDeath)
              Char:SetAttribute("IsDead", true)
              end
        end
    end
end
task.wait()
end
end)()
task.spawn(entityTable.Debug.OnEntityStartMoving)
-- Get PathfindingService
local pathfindingService = game:GetService("PathfindingService")
local tweenservice = game.TweenService

-- Loop through all doors and create pathfinding object
for _, room in pairs(workspace:GetChildren()) do
    if room:FindFirstChild("Nodes") then -- Change this to the name of your door
            for _, nodes in pairs(room:FindFirstChild("Nodes"):GetChildren()) do

            if room:FindFirstChild("Nodes"):FindFirstChild("Node") then
            local newPosition = nodes.Position
-- Calculate the distance between the start and end position of the part
local distance = (newPosition - entity.Position).Magnitude

local duration = distance / sped

-- Create a new tween using the TweenService
local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
local tween = game:GetService("TweenService"):Create(entity, tweenInfo, {Position = newPosition})

-- Start the tween
tween:Play()
            tween.Completed:Wait()
            end
            task.spawn(entityTable.Debug.OnEntityEnteredRoom, room)
            task.wait(entityTable.Config.PauseNextRoom)
            end
    elseif room:FindFirstChild("door") then -- Change this to the name of your door
            local newPosition = room:FindFirstChild("door").Position
-- Calculate the distance between the start and end position of the part
local distance = (newPosition - entity.Position).Magnitude

local duration = distance / sped

-- Create a new tween using the TweenService
local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
local tween = game:GetService("TweenService"):Create(entity, tweenInfo, {Position = newPosition})

-- Start the tween
tween:Play()
            tween.Completed:Wait()
    task.spawn(entityTable.Debug.OnEntityEnteredRoom, room)
    end
    task.wait(entityTable.Config.PauseNextRoom)
end

task.spawn(entityTable.Debug.OnEntityDespawned)
exist = false
if entityTable.Config.Fall == true then

entity.Anchored = false
entity.CanCollide = false

end

task.wait(entityTable.Config.DespawnTime)
entityModel:Destroy()
end

return Spawner

--credits to RegularVynixu